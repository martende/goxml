package goxml
/*
#cgo pkg-config: libxml-2.0
#include <libxml/tree.h>
#include "test.h"
*/
import "C"
import "unsafe"

const XML_ATTRIBUTE_CDATA=C.XML_ATTRIBUTE_CDATA
const XML_ATTRIBUTE_DECL=C.XML_ATTRIBUTE_DECL
const XML_ATTRIBUTE_ENTITIES=C.XML_ATTRIBUTE_ENTITIES
const XML_ATTRIBUTE_ENTITY=C.XML_ATTRIBUTE_ENTITY
const XML_ATTRIBUTE_ENUMERATION=C.XML_ATTRIBUTE_ENUMERATION
const XML_ATTRIBUTE_FIXED=C.XML_ATTRIBUTE_FIXED
const XML_ATTRIBUTE_ID=C.XML_ATTRIBUTE_ID
const XML_ATTRIBUTE_IDREF=C.XML_ATTRIBUTE_IDREF
const XML_ATTRIBUTE_IDREFS=C.XML_ATTRIBUTE_IDREFS
const XML_ATTRIBUTE_IMPLIED=C.XML_ATTRIBUTE_IMPLIED
const XML_ATTRIBUTE_NMTOKEN=C.XML_ATTRIBUTE_NMTOKEN
const XML_ATTRIBUTE_NMTOKENS=C.XML_ATTRIBUTE_NMTOKENS
const XML_ATTRIBUTE_NODE=C.XML_ATTRIBUTE_NODE
const XML_ATTRIBUTE_NONE=C.XML_ATTRIBUTE_NONE
const XML_ATTRIBUTE_NOTATION=C.XML_ATTRIBUTE_NOTATION
const XML_ATTRIBUTE_REQUIRED=C.XML_ATTRIBUTE_REQUIRED
const XML_BUFFER_ALLOC_DOUBLEIT=C.XML_BUFFER_ALLOC_DOUBLEIT
const XML_BUFFER_ALLOC_EXACT=C.XML_BUFFER_ALLOC_EXACT
const XML_BUFFER_ALLOC_IMMUTABLE=C.XML_BUFFER_ALLOC_IMMUTABLE
const XML_BUFFER_ALLOC_IO=C.XML_BUFFER_ALLOC_IO
const XML_CDATA_SECTION_NODE=C.XML_CDATA_SECTION_NODE
const XML_COMMENT_NODE=C.XML_COMMENT_NODE
const XML_DOCB_DOCUMENT_NODE=C.XML_DOCB_DOCUMENT_NODE
const XML_DOCUMENT_FRAG_NODE=C.XML_DOCUMENT_FRAG_NODE
const XML_DOCUMENT_NODE=C.XML_DOCUMENT_NODE
const XML_DOCUMENT_TYPE_NODE=C.XML_DOCUMENT_TYPE_NODE
const XML_DOC_DTDVALID=C.XML_DOC_DTDVALID
const XML_DOC_HTML=C.XML_DOC_HTML
const XML_DOC_INTERNAL=C.XML_DOC_INTERNAL
const XML_DOC_NSVALID=C.XML_DOC_NSVALID
const XML_DOC_OLD10=C.XML_DOC_OLD10
const XML_DOC_USERBUILT=C.XML_DOC_USERBUILT
const XML_DOC_WELLFORMED=C.XML_DOC_WELLFORMED
const XML_DOC_XINCLUDE=C.XML_DOC_XINCLUDE
const XML_DTD_NODE=C.XML_DTD_NODE
const XML_ELEMENT_CONTENT_ELEMENT=C.XML_ELEMENT_CONTENT_ELEMENT
const XML_ELEMENT_CONTENT_MULT=C.XML_ELEMENT_CONTENT_MULT
const XML_ELEMENT_CONTENT_ONCE=C.XML_ELEMENT_CONTENT_ONCE
const XML_ELEMENT_CONTENT_OPT=C.XML_ELEMENT_CONTENT_OPT
const XML_ELEMENT_CONTENT_OR=C.XML_ELEMENT_CONTENT_OR
const XML_ELEMENT_CONTENT_PCDATA=C.XML_ELEMENT_CONTENT_PCDATA
const XML_ELEMENT_CONTENT_PLUS=C.XML_ELEMENT_CONTENT_PLUS
const XML_ELEMENT_CONTENT_SEQ=C.XML_ELEMENT_CONTENT_SEQ
const XML_ELEMENT_DECL=C.XML_ELEMENT_DECL
const XML_ELEMENT_NODE=C.XML_ELEMENT_NODE
const XML_ELEMENT_TYPE_ANY=C.XML_ELEMENT_TYPE_ANY
const XML_ELEMENT_TYPE_ELEMENT=C.XML_ELEMENT_TYPE_ELEMENT
const XML_ELEMENT_TYPE_EMPTY=C.XML_ELEMENT_TYPE_EMPTY
const XML_ELEMENT_TYPE_MIXED=C.XML_ELEMENT_TYPE_MIXED
const XML_ELEMENT_TYPE_UNDEFINED=C.XML_ELEMENT_TYPE_UNDEFINED
const XML_ENTITY_DECL=C.XML_ENTITY_DECL
const XML_ENTITY_NODE=C.XML_ENTITY_NODE
const XML_ENTITY_REF_NODE=C.XML_ENTITY_REF_NODE
const XML_HTML_DOCUMENT_NODE=C.XML_HTML_DOCUMENT_NODE
const XML_NAMESPACE_DECL=C.XML_NAMESPACE_DECL
const XML_NOTATION_NODE=C.XML_NOTATION_NODE
const XML_PI_NODE=C.XML_PI_NODE
const XML_TEXT_NODE=C.XML_TEXT_NODE
const XML_XINCLUDE_END=C.XML_XINCLUDE_END
const XML_XINCLUDE_START=C.XML_XINCLUDE_START
func XmlAddChild(parent *XmlNode,cur *XmlNode) *XmlNode {
	var c_ret C.xmlNodePtr
	g_ret := &XmlNode{}
	c_parent := parent.handler
	c_cur := cur.handler
	c_ret = C.xmlAddChild(c_parent,c_cur)
	g_ret.handler = c_ret
	return g_ret
}

func XmlFreeDoc(cur *XmlDoc) {
	c_cur := cur.handler
	C.xmlFreeDoc(c_cur)
}


func SetUserdata(d interface{}) {
	C.set_userdata(unsafe.Pointer(&d));
}
